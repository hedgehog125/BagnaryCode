#InstructionSet 1.1#
/*
This first version only supports 2 bit numbers

Equivilent to
let sum = RAM.slice(, + 2);
let carry = false;
let i = sum.length - 1;
while (i != -1) {
    if (RAM[ + i] == "1") {
        if (sum[i] == "1") {
            if (! carry) {
                sum[i] = "0";
                carry = true;
            }
        }
        else {
            if (carry) {
                sum[i] = "0";
                carry = false;
            }
            else {
                sum[i] = "1";
            }
        }
    }
    else if (carry) {
        if (sum[i] == "1") {
            sum[i] = "0";
        }
        else {
            carry = false;
            sum[i] = "1";
        }
    }
    i--;
}
*/


// Load the first number into the accumulator (both binary digits)
// This is what will be the total
loadAccBit
#Pointer Num1#
0
loadAccBit
#Pointer Num1
1#
1

// Load the second number into the accumulator for faster read access
loadAccBit
#Pointer Num2#
14
loadAccBit
#Pointer Num2
1#
15

// Carry variable. Set to false initially
loadAccBit
#Pointer Constants#
2

// Constant of 1
loadAccBit
#Pointer Constants
1#
3

// The digits are processed in reverse. This is digit 1

// Jump if the last bit of the second number is 1
jumpIf
#Pointer IfSecondBitOfSecondIs1#
15
// Else
    // Only run if we're carrying
    jumpIf
    #Pointer IfSecondBitCarrying#
    2
    // Else
        // Jump to the next digit
        jumpIf
        #Pointer JumpToProcessFirstDigit#
        3
    #Pointer IfSecondBitCarrying#
    // If carrying
        // If the last bit of the first number is 1
        jumpIf
        #Pointer IfSecondBitOfFirstIs1#
        1
        // Else
            // Replace this digit with a 1
            loadAccBit
            #Pointer Constants
            1#
            1

            // Set carry to 0
            loadAccBit
            #Pointer Constants#
            2

            // Jump to next digit
            jumpIf
            #Pointer JumpToProcessFirstDigit#
            3

        #Pointer IfSecondBitOfFirstIs1#
        // If it's 1
            // Replace this digit with a 0
            loadAccBit
            #Pointer Constants#
            1

            // Jump to next digit
            jumpIf
            #Pointer JumpToProcessFirstDigit#
            3

#Pointer IfSecondBitOfSecondIs1#
// If the second digit of the second number is 1
    // If the last bit of the first number is 1
    jumpIf
    #Pointer IfSecondBitOfFirstIs1_2#
    1
    // Else
        // Check if carrying
        jumpIf
        #Pointer IfSecondBitCarrying_2#
        3
        // Else
            // Replace this digit with a 1
            loadAccBit
            #Pointer Constants
            1#
            1

            // Jump to next digit
            jumpIf
            #Pointer JumpToProcessFirstDigit#
            3
        #Pointer IfSecondBitCarrying_2#
        // If carrying
            // Replace this digit with a 0
            loadAccBit
            #Pointer Constants#
            1

            // Set carry to 0
            loadAccBit
            #Pointer Constants#
            2

            // Jump to next digit
            jumpIf
            #Pointer JumpToProcessFirstDigit#
            3
    #Pointer IfSecondBitOfFirstIs1_2#
    // If it's 1
        // Check if not carrying, otherwise if carrying, jump to the next digit
        jumpIf
        #Pointer JumpToProcessFirstDigit#
        2
        // Else
            // Replace this digit with a 0
            loadAccBit
            #Pointer Constants#
            1

            // Set carry to 1
            loadAccBit
            #Pointer Constants
            1#
            2

            // Jump to next digit
            jumpIf
            #Pointer JumpToProcessFirstDigit#
            3




#Pointer JumpToProcessFirstDigit#
// Jump if the first bit of the second number is 1
jumpIf
#Pointer IfFirstBitOfSecondIs1#
14
// Else
    // Only run if we're carrying
    jumpIf
    #Pointer IfFirstBitCarrying#
    2
    // Else
        // Jump to the next digit
        jumpIf
        #Pointer JumpToFinish#
        3
    #Pointer IfFirstBitCarrying#
    // If carrying
        // If the first bit of the first number is 1
        jumpIf
        #Pointer IfFirstBitOfFirstIs1#
        0
        // Else
            // Replace this digit with a 1
            loadAccBit
            #Pointer Constants
            1#
            0

            // Set carry to 0
            loadAccBit
            #Pointer Constants#
            2

            // Jump to next digit
            jumpIf
            #Pointer JumpToFinish#
            3

        #Pointer IfFirstBitOfFirstIs1#
        // If it's 1
            // Replace this digit with a 0
            loadAccBit
            #Pointer Constants#
            0

            // Jump to next digit
            jumpIf
            #Pointer JumpToFinish#
            3

#Pointer IfFirstBitOfSecondIs1#
// If the second digit of the second number is 1
    // If the first bit of the first number is 1
    jumpIf
    #Pointer IfFirstBitOfFirstIs1_2#
    0
    // Else
        // Check if carrying
        jumpIf
        #Pointer IfFirstBitCarrying_2#
        3
        // Else
            // Replace this digit with a 1
            loadAccBit
            #Pointer Constants
            1#
            0

            // Jump to next digit
            jumpIf
            #Pointer JumpToFinish#
            3
        #Pointer IfFirstBitCarrying_2#
        // If carrying
            // Replace this digit with a 0
            loadAccBit
            #Pointer Constants#
            0

            // Set carry to 0
            loadAccBit
            #Pointer Constants#
            2

            // Jump to next digit
            jumpIf
            #Pointer JumpToFinish#
            3
    #Pointer IfFirstBitOfFirstIs1_2#
    // If it's 1
        // Check if not carrying, otherwise if carrying, jump to the next digit
        jumpIf
        #Pointer JumpToProcessFirstDigit#
        2
        // Else
            // Replace this digit with a 0
            loadAccBit
            #Pointer Constants#
            0

            // Set carry to 1
            loadAccBit
            #Pointer Constants
            1#
            2

            // Jump to next digit
            jumpIf
            #Pointer JumpToProcessFirstDigit#
            3



#Pointer JumpToFinish#
// Write the accumulator bits to the output addresses
saveAccBit
#Pointer Output#
0

saveAccBit
#Pointer Output
1#
1

stop

// Constants
#Pointer Constants#
#Raw 01#

// Input numbers
#Pointer Num1#
#Raw 01#
#Pointer Num2#
#Raw 01#

// Output value
#Pointer Output#
#Raw 00#
