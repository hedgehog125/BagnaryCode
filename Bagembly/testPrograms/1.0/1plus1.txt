#InstructionSet 1.1
/*
This first version only supports 2 bit numbers

Equivilent to
let sum = RAM.slice(, + 2);
let carry = false;
let i = sum.length - 1;
while (i != -1) {
    if (RAM[ + i] == "1") {
        if (sum[i] == "1") {
            if (! carry) {
                sum[i] = "0";
                carry = true;
            }
        }
        else {
            if (carry) {
                sum[i] = "0";
                carry = false;
            }
            else {
                sum[i] = "1";
            }
        }
    }
    else if (carry) {
        if (sum[i] == "1") {
            sum[i] = "0";
        }
        else {
            carry = false;
            sum[i] = "1";
        }
    }
    i--;
}
*/


// Load the first number into the accumulator (both binary digits)
// This is what will be the total
loadAccBit
0000 0000 0000 0000
0000
loadAccBit
0000 0000 0000 0000
0001

// Load the second number into the accumulator for faster read access
loadAccBit
0000 0000 0000 0000
1110
loadAccBit
0000 0000 0000 0000
1111

// Carry variable. Set to false initially
loadAccBit
0000 0000 0000 0000
0010

// Constant of 1
loadAccBit
0000 0000 0000 0000
0011

// The digits are processed in reverse. This is digit 1

// Jump if the last bit of the second number is 1
jumpIf
0000 0000 0000 0000
1111
// Else
    // Only run if we're carrying
    jumpIf
    0000 0000 0000 0000
    0010
    // Else
        // Jump over this logic
        jumpIf
        0000 0000 0000 0000
        0011
    // If carrying
        // If the last bit of the first number is 1
        jumpIf
        0000 0000 0000 0000
        0001
        // Else
            // Replace this digit with a 1
            loadAccBit
            0000 0000 0000 0000
            0001

            // Set carry to 0
            loadAccBit
            0000 0000 0000 0000
            0010

            // Jump to next digit
            jumpIf
            0000 0000 0000 0000
            0011

        // If it's 1
            // Replace this digit with a 0
            loadAccBit
            0000 0000 0000 0000
            0001

            // Jump to next digit
            jumpIf
            0000 0000 0000 0000
            0011

// If the second digit of the second number is 1
    // If the last bit of the first number is 1
    jumpIf
    0000 0000 0000 0000
    0001
    // Else
        // Check if carrying
        jumpIf
        0000 0000 0000 0000
        0010
        // Else
            // Replace this digit with a 1
            loadAccBit
            0000 0000 0000 0000
            0001

            // Jump to next digit
            jumpIf
            0000 0000 0000 0000
            0011
        // If carrying
            // Replace this digit with a 0
            loadAccBit
            0000 0000 0000 0000
            0001

            // Set carry to 0
            loadAccBit
            0000 0000 0000 0000
            0010

            // Jump to next digit
            jumpIf
            0000 0000 0000 0000
            0011
    // If it's 1
        // Check if not carrying, otherwise if carrying, jump to the next digit
        jumpIf
        0000 0000 0000 0000
        0010
        // Else
            // Replace this digit with a 0
            loadAccBit
            0000 0000 0000 0000
            0001

            // Set carry to 1
            loadAccBit
            0000 0000 0000 0000
            0010

            // Jump to next digit
            jumpIf
            0000 0000 0000 0000
            0011


// Jump if the first bit of the second number is 1
jumpIf
0000 0000 0000 0000
1110
// Else
    // Only run if we're carrying
    jumpIf
    0000 0000 0000 0000
    0010
    // Else
        // Jump over this logic
        jumpIf
        0000 0000 0000 0000
        0011
    // If carrying
        // If the first bit of the first number is 1
        jumpIf
        0000 0000 0000 0000
        0000
        // Else
            // Replace this digit with a 1
            loadAccBit
            0000 0000 0000 0000
            0000

            // Set carry to 0
            loadAccBit
            0000 0000 0000 0000
            0010

            // Jump to next digit
            jumpIf
            0000 0000 0000 0000
            0011

        // If it's 1
            // Replace this digit with a 0
            loadAccBit
            0000 0000 0000 0000
            0000

            // Jump to next digit
            jumpIf
            0000 0000 0000 0000
            0011

// If the first digit of the second number is 1
    // If the first bit of the first number is 1
    jumpIf
    0000 0000 0000 0000
    0000
    // Else
        // Check if carrying
        jumpIf
        0000 0000 0000 0000
        0010
        // Else
            // Replace this digit with a 1
            loadAccBit
            0000 0000 0000 0000
            0000

            // Jump to next digit
            jumpIf
            0000 0000 0000 0000
            0011
        // If carrying
            // Replace this digit with a 0
            loadAccBit
            0000 0000 0000 0000
            0000

            // Set carry to 0
            loadAccBit
            0000 0000 0000 0000
            0010

            // Jump to next digit
            jumpIf
            0000 0000 0000 0000
            0011
    // If it's 1
        // Check if not carrying, otherwise if carrying, jump to the next digit
        jumpIf
        0000 0000 0000 0000
        0010
        // Else
            // Replace this digit with a 0
            loadAccBit
            0000 0000 0000 0000
            0000

            // Set carry to 1
            loadAccBit
            0000 0000 0000 0000
            0010

            // Jump to next digit
            jumpIf
            0000 0000 0000 0000
            0011

stop

// Constants
01
// Input numbers
01
01

// Output value
0
